# -*- coding: utf-8 -*-
"""Breast Cancer Random Forest

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1e9v-9O7Q5XaCs6FiNgFuy8Tl1OaJAW0w

# 1. Dataset y librerías
importaremos módulos necesarios para la construcción del modelo.
"""

# Scikit-Learn
import sklearn
assert sklearn.__version__>= '0.20'

import pandas as pd
import numpy as np
import os
import matplotlib.pyplot as plt
import seaborn as sns

import warnings
warnings.filterwarnings(action='ignore', message='^internal gelsd')

"""## Descargar y limpiar dataset"""

df = pd.read_csv('data.csv')

df.head()

# Validación
df.shape

#Sé que no hay datos nulos

# Análisis del target
sns.countplot(x='diagnosis', data = df, palette = 'hls')

df.groupby('diagnosis')['id'].count()

# Realizando el cambio B->1, M->0
df['diagnosis'] = df['diagnosis'].replace({'M': 0, 'B': 1})

# Validando
df['diagnosis'].value_counts()

# Identificamos variables
features = list(set(df.columns.tolist())-set(['Unnamed: 32', 'diagnosis', 'id']))
features

# Matrices de datos
X = df[features]
y = df.diagnosis  #Variable objetivo



"""# 2. Random Forest"""

# Listas para almacenar las métricas de cada una de las 30 corridas
recall_scores = []
specificity_scores = []
auc_scores = []
precision_scores = []
f1_scores = []
accuracy_scores = []
gini_scores = []

# Muestreo
from sklearn.model_selection import train_test_split

for i in range(30): # 30 corridas
  X_train, X_test, y_train, y_test = train_test_split(X, y,
                                                    stratify = y,
                                                    test_size = 0.3,
                                                    random_state=i)

  # Cargando librería RFClassifier
  from sklearn.ensemble import RandomForestClassifier
  import time

  # Configuración del modelo RF
  rfc = RandomForestClassifier(n_estimators = 100,
                               max_depth = 6,
                               min_samples_leaf = 0.01,
                               max_features = 0.1,
                               max_samples = 0.7,
                               oob_score = True,
                               verbose = 1,
                               n_jobs = 2, # Colab permite 2 procesos en simultáneo
                               random_state = 123)
  start_time = time.time()

  rfc = rfc.fit(X_train, y_train)

  print('--%s seconds' %(time.time() - start_time))
  start_time = time.time()

  rfc = rfc.fit(X_train, y_train)

  print('--%s seconds' %(time.time() - start_time))


  # Usando el modelo para predecir
  X_train['probability'] = rfc.predict_proba(X_train[features])[:,1]
  X_test['probability'] = rfc.predict_proba(X_test[features])[:,1]

  X_train['prediction'] = rfc.predict(X_train[features])
  X_test['prediction'] = rfc.predict(X_test[features])

  # Resumen de métricas del modelo
  from sklearn.metrics import *

  # Matriz de confusión
  tn, fp, fn, tp = confusion_matrix(y_test, X_test.prediction).ravel()
  specificity = tn / (tn + fp)
  recall = recall_score(y_test, X_test.prediction)
  auc = roc_auc_score(y_test, X_test.probability)
  precision = precision_score(y_test, X_test.prediction)
  f1 = f1_score(y_test, X_test.prediction)
  accuracy = accuracy_score(y_test, X_test.prediction)
  gini = 2 * auc - 1

  # Almacenando las métricas en las listas correspondientes
  recall_scores.append(recall)
  specificity_scores.append(specificity)
  auc_scores.append(auc)
  precision_scores.append(precision)
  f1_scores.append(f1)
  accuracy_scores.append(accuracy)
  gini_scores.append(gini)

specificity_scores

# Valores estadísticos Recall
df_recall = pd.DataFrame(recall_scores, columns=['valores'])
val_est_recall = df_recall['valores'].describe()
print(val_est_recall)

mediana = df_recall['valores'].median()
print("Mediana:", mediana)

# Valores estadísticos AUC

df_auc = pd.DataFrame(auc_scores, columns=['valores'])
val_est_auc = df_auc['valores'].describe()
print(val_est_auc)

mediana = df_auc['valores'].median()
print("Mediana:", mediana)

# Valores estadísticos Precision

df_precision = pd.DataFrame(precision_scores, columns=['valores'])
val_est_precision = df_precision['valores'].describe()
print(val_est_precision)

mediana = df_precision['valores'].median()
print("Mediana:", mediana)

# Valores estadísticos F1

df_f1 = pd.DataFrame(f1_scores, columns=['valores'])
val_est_f1 = df_f1['valores'].describe()
print(val_est_f1)

mediana = df_f1['valores'].median()
print("Mediana:", mediana)

# Valores estadísticos accuracy

df_accuracy = pd.DataFrame(accuracy_scores, columns=['valores'])
val_est_accuracy = df_accuracy['valores'].describe()
print(val_est_accuracy)

mediana = df_accuracy['valores'].median()
print("Mediana:", mediana)

# Valores estadísticos gini

df_gini = pd.DataFrame(gini_scores, columns=['valores'])
val_est_gini = df_gini['valores'].describe()
print(val_est_gini)

mediana = df_gini['valores'].median()
print("Mediana:", mediana)

